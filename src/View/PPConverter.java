/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.controllerVariables;
import static Controller.controllerVariables.Layer.*;
import Controller.readInputFile;
import java.io.File;
import javax.swing.JFileChooser;
import Model.*;
import java.util.ArrayList;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author josh
 */
public class PPConverter extends javax.swing.JFrame {

    controllerVariables cv;
    /**
     * Creates new form mainFrame
     */
    public PPConverter(controllerVariables cv) {
        this.cv = cv;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {


        mainTabFrame = new javax.swing.JTabbedPane();
        FileInfoPane = new javax.swing.JScrollPane();
        FileInfoTable = new javax.swing.JTable();
        StackListScrollPane = new javax.swing.JScrollPane();
        StackListTable = new javax.swing.JTable();
        ComponentListScrollPane = new javax.swing.JScrollPane();
        ComponentListTable = new javax.swing.JTable();
        StackPresetsScrollPane = new javax.swing.JScrollPane();
        StackPresetsListTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        generateStackButton = new javax.swing.JButton();
        invertButton = new javax.swing.JButton();
        generatePresets = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        readFileMenuItem = new javax.swing.JMenuItem();
        writeFileMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainTabFrame.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        mainTabFrame.setName("MainTabSet"); // NOI18N

        FileInfoTable.setModel(cv.getFileInfoTableModel());
        FileInfoTable.setColumnSelectionAllowed(true);
        FileInfoTable.getTableHeader().setReorderingAllowed(false);
        FileInfoPane.setViewportView(FileInfoTable);
        FileInfoTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        mainTabFrame.addTab("File Info", FileInfoPane);

        StackListTable.setModel(cv.getStackTableModel());
        StackListScrollPane.setViewportView(StackListTable);

        mainTabFrame.addTab("Stack List", StackListScrollPane);

        ComponentListTable.setModel(cv.getComponentListTableModel());
        ComponentListScrollPane.setViewportView(ComponentListTable);

        mainTabFrame.addTab("Component List", ComponentListScrollPane);

        StackPresetsListTable.setModel(cv.getStackPresetsTableModel());
        StackPresetsScrollPane.setViewportView(StackPresetsListTable);

        mainTabFrame.addTab("Stack Presets", StackPresetsScrollPane);

        generateStackButton.setText("Generate Stack");
        generateStackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                generateStackButtonMouseClicked(evt);
            }
        });
        generateStackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateStackButtonActionPerformed(evt);
            }
        });

        invertButton.setText("Invert Stack");

        generatePresets.setText("Generate Presets");
        generatePresets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePresetsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generateStackButton)
                .addGap(18, 18, 18)
                .addComponent(invertButton)
                .addGap(18, 18, 18)
                .addComponent(generatePresets)
                .addContainerGap(597, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateStackButton)
                    .addComponent(invertButton)
                    .addComponent(generatePresets))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        readFileMenuItem.setText("Read File");
        readFileMenuItem.setName("readFileMenuItem"); // NOI18N
        readFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(readFileMenuItem);

        writeFileMenuItem.setText("Write File");
        writeFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(writeFileMenuItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");
        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainTabFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readFileMenuItemActionPerformed
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this.mainTabFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            cv.setInputFile(fc.getSelectedFile());
            cv.setCurrentDirectory(cv.getInputFile().getPath());//store the current directory here so we can retrieve it later when we do other file operations
            cv.setRF(new readInputFile(cv.getInputFile()));
            cv.setICL(cv.getRF().getComponentList());
            cv.setfileInfoTabHeaders(cv.getRF().getColumnNames());
            cv.setFileInfoTableModel(new Model.fileInfoTableModel(cv.getICL()));
            FileInfoTable.setModel(cv.getFileInfoTableModel());
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

            for (int x = 0; x < cv.getFileInfoTableModel().getColumnCount(); x++) {
                FileInfoTable.getColumnModel().getColumn(x).setCellRenderer(centerRenderer);
            }

            FileInfoTable.updateUI();
        } else {
            ;
        }
    }//GEN-LAST:event_readFileMenuItemActionPerformed

    private void writeFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeFileMenuItemActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser(cv.getCurrentDirectory());
        int returnVal = fc.showOpenDialog(this.mainTabFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            cv.setOutputFile(fc.getSelectedFile());
            cv.setCurrentDirectory(cv.getOutputFile().getPath());//store the current directory here so we can retrieve it later when we do other file operations

//            cv.setRF(new readInputFile(cv.getInputFile()));
//            cv.getRF().getComponentList();
//            cv.setfileInfoTabHeaders(cv.getRF().getColumnNames());
//            cv.setFileInfoTableModel(new Model.fileInfoTableModel(cv.getRF().getComponentList()));
//            FileInfoTable.setModel(cv.getFileInfoTableModel());
//            FileInfoTable.updateUI();
        } else {

        }

    }//GEN-LAST:event_writeFileMenuItemActionPerformed

    private void generateStackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateStackButtonActionPerformed
        // TODO add your handling code here:

        for (Component component : cv.getICL()){

            //this is for future use, we're going to sanitize the angles here
            //we're going to look up components in the database
            //verify height and speed and head
            component.setDelay(0);
            if (cv.getLayer() == Top) {
                component.setLayer('T');
            } else {
                component.setLayer('B');
            }
            component.setNo(component.getDesignator());
            if (!cv.isUseBothHeads()) {
                component.setPHead(1);
            } else {
                ;//do something else that I don't care about right now
            }
//            component.setCheckVisual(Boolean.TRUE);
//            component.setCheckVacuum(Boolean.TRUE);
            component.setSpeed(0);
        }

        cv.setComponentListTableModel(new Model.componentListTableModel(cv.getRF().getComponentList()));
        ComponentListTable.setModel(cv.getComponentListTableModel());
        cv.setICL(cv.getRF().getComponentList());
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int x = 0; x < cv.getComponentListTableModel().getColumnCount(); x++) {
            ComponentListTable.getColumnModel().getColumn(x).setCellRenderer(centerRenderer);
        }
        cv.sanitizeAngles();
        cv.makeStackList();

        cv.setStackTableModel(new stackTableModel(cv.getStackList()));

        StackListTable.setModel(cv.getStackTableModel());
        for (int x = 0; x < cv.getStackTableModel().getColumnCount(); x++) {
            StackListTable.getColumnModel().getColumn(x).setCellRenderer(centerRenderer);
        }
        
        
        StackListTable.updateUI();
        ComponentListTable.updateUI();

    }//GEN-LAST:event_generateStackButtonActionPerformed

    private void generateStackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generateStackButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_generateStackButtonMouseClicked

    private void generatePresetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePresetsActionPerformed
        cv.generatePresets();
        cv.setStackPresetsTableModel(cv.getStackPresetsTableModel());
        if (cv.getStackPresetsTableModel() != null){//TODO: this check may not be necessary.
            StackPresetsListTable.setModel(cv.getStackPresetsTableModel());
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            for (int x = 0; x < cv.getStackPresetsTableModel().getColumnCount(); x++) {
                StackPresetsListTable.getColumnModel().getColumn(x).setCellRenderer(centerRenderer);
            }
            
        StackPresetsListTable.updateUI();
        }
    }//GEN-LAST:event_generatePresetsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        controllerVariables cv = new controllerVariables();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PPConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PPConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PPConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PPConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PPConverter(cv).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ComponentListScrollPane;
    private javax.swing.JTable ComponentListTable;
    private javax.swing.JScrollPane FileInfoPane;
    private javax.swing.JTable FileInfoTable;
    private javax.swing.JScrollPane StackListScrollPane;
    private javax.swing.JTable StackListTable;
    private javax.swing.JTable StackPresetsListTable;
    private javax.swing.JScrollPane StackPresetsScrollPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton generatePresets;
    private javax.swing.JButton generateStackButton;
    private javax.swing.JButton invertButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.ButtonGroup layerButtonGroup;
    private javax.swing.JTabbedPane mainTabFrame;
    private javax.swing.JMenuItem readFileMenuItem;
    private javax.swing.JMenuItem writeFileMenuItem;
    // End of variables declaration//GEN-END:variables
}
